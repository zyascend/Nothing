package com.zyascend.Nothing.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_BEAN".
*/
public class CacheBeanDao extends AbstractDao<CacheBean, Void> {

    public static final String TABLENAME = "CACHE_BEAN";

    /**
     * Properties of entity CacheBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cache_type = new Property(0, String.class, "cache_type", false, "CACHE_TYPE");
        public final static Property Json_content = new Property(1, String.class, "json_content", false, "JSON_CONTENT");
        public final static Property Create_time = new Property(2, long.class, "create_time", false, "CREATE_TIME");
    }


    public CacheBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CacheBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_BEAN\" (" + //
                "\"CACHE_TYPE\" TEXT," + // 0: cache_type
                "\"JSON_CONTENT\" TEXT," + // 1: json_content
                "\"CREATE_TIME\" INTEGER NOT NULL );"); // 2: create_time
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CACHE_BEAN_CACHE_TYPE ON CACHE_BEAN" +
                " (\"CACHE_TYPE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheBean entity) {
        stmt.clearBindings();
 
        String cache_type = entity.getCache_type();
        if (cache_type != null) {
            stmt.bindString(1, cache_type);
        }
 
        String json_content = entity.getJson_content();
        if (json_content != null) {
            stmt.bindString(2, json_content);
        }
        stmt.bindLong(3, entity.getCreate_time());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheBean entity) {
        stmt.clearBindings();
 
        String cache_type = entity.getCache_type();
        if (cache_type != null) {
            stmt.bindString(1, cache_type);
        }
 
        String json_content = entity.getJson_content();
        if (json_content != null) {
            stmt.bindString(2, json_content);
        }
        stmt.bindLong(3, entity.getCreate_time());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CacheBean readEntity(Cursor cursor, int offset) {
        CacheBean entity = new CacheBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cache_type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // json_content
            cursor.getLong(offset + 2) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheBean entity, int offset) {
        entity.setCache_type(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJson_content(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreate_time(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CacheBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CacheBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(CacheBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
